#!/bin/dash

# Â© 2020,2023 drpawpaw - All Rights Reserved.
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version. This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details: http://www.gnu.org/licenses/

# Accepts the file path to a script as its argument, then prints a list of the
# programs/executables that script depends on. It also prints a dash/bash
# for-in loop ready to use: copy and paste it near the top of the evaluated
# script to have it check at script-start that each executable it depends on
# is available. The for-in loop quits the script if any of them are not.

# This script is very simple minded. It will likely produce a list of
# executable dependencies that is too large. Search the evaluated script, or
# use your knowledge of it, to determine which of the questionable results are
# false positives.

# It can also miss executable dependencies. E.G. It might miss some which are
# constructed as strings during runtime and then executed with eval.
#
# PATH values vary from user to user. Thus, this script can produce different
# dependencies lists when run under different users against the same script.

# If the for-in loop produced by this script is already in the script to be
# evaluated, delete the entire for-in loop before evaluating the script, else
# the for-in loop's args will be listed as needed by the script, and that may
# no longer be the case for some of them.

# Only the line of dependencies printed just below the progress dots is sent
# to stdout. All other outputs of this script are on stderr.

exclude_coreutils=true
if [ "-c" = "$1" ]
then
    shift 1
    exclude_coreutils=false
fi

if ! test -f "$1" || ! test -r "$1"
then
    echo "\n'$1' must be a regular readable file.\n" >&2
    exit 1
fi

dependencies=''
addTokenToDependencies ()
{
    [ -z "$token" ] && return

    echo "$token" | egrep '(^|\/)(b|d)ash)$' >/dev/null 2>&1 \
                                              && token='' && return

    # For any of these variables that occur within a
    # possible path name, substitute their current value.
    for v in HOME USER UID HOSTNAME JAVA_HOME LOGNAME PWD SHELL TERM
    do
        if echo $token | egrep ".*$v.*" >/dev/null 2>&1
        then
            v2=$( eval echo "\$$v" )
            token=$( echo "$token" | sed -r "s|\\\$$v(/\|$)|$v2\\1|g" )
        fi
    done
    if  which "$token" >/dev/null 2>&1
    then
        dependencies="$dependencies $token"
        echo -n '.' >&2
    fi
    token=''
}

token='' LN='' c=''
IFS='
'
while read -r LN
do
    # Lex line by line instead of char by char because 'read -rn 1' strips
    # all newlines and turns space chars into the null/empty char.

    LN=$( echo "$LN" | sed -r 's/ *#.*$//' )
    for c in $( echo "$LN" | sed -r 's|(.)|\1\n|g' )
    do
        if echo "$c" | egrep '[-_$@/[:alnum:]]' >/dev/null 2>&1
        then
            token="$token$c"
        else
            addTokenToDependencies
        fi
    done

    addTokenToDependencies

done < "$1"        # this script's command line arg, the file path to a script


# Very unlikely any program in Debian package coreutils won't be on a host.
if $exclude_coreutils
then
    if which apt-file >/dev/null 2>&1
    then
        coreutils=$( mktemp )
        apt-file show coreutils | \
            sed -r 's/^ *coreutils: *//' | \
            egrep '^(/usr/bin/|/bin/)' | \
            sed -r 's:^.*/::' > "$coreutils"

        IFS=' ' tmpDs=""
        for d in $dependencies
        do
            if ! egrep "$d" "$coreutils" >/dev/null 2>&1
            then
                tmpDs="${tmpDs} $d"
            fi
        done
        dependencies="$tmpDs"
        rm "$coreutils"
    fi
fi

dependencies=$( echo "$dependencies" | tr ' ' '\n' |
                sort -u | tr '\n' ' ' | sed -r 's|^ *||' )
echo "\n$dependencies"

echo "\nfor d in $dependencies
do
    if ! which \$d >/dev/null 2>&1
    then
        echo \"\${0##*/} depends on \${d}. Didn't find \${d}\" >&2
        exit 1
    fi
done" >&2

if [ 0 != "$UID" ] && \
   echo $dependencies | egrep ' su(do)?( |$)' >/dev/null 2>&1
then
    echo "\n'${1##*/}' seems to possibly have a dependency on 'su' or" \
         "'sudo'. If so it might be good to pass it to this script" \
         "running under one of them." >&2
fi

