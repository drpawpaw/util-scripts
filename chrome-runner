#!/bin/bash

# Author: drpawpaw - 201?,2022

# Isolates chrome instances (even more than chrome itself already does) to
# topic-specific instances (or to whatever categories you want). Also, after
# you exit an instance it removes most of the "user experience enhancements"
# data that is cached by chrome between runs. It does not remove essential
# data like cookies, bookmarks, user preferences or core local state info.

# 2022 was a major re-write of a similar but lower quality version.


declare -r RUN_CONFIGS_DIR="$HOME/.config/chrome-runner"
declare -r RUN_CACHES_DIR="$HOME/.cache/chrome-runner"
declare -r CREATE_NEW_CONFIG="a new runtime config"
declare -r chromeConfigFolders=$( ls -1 "$RUN_CONFIGS_DIR" )


if [ ! -d "$RUN_CONFIGS_DIR" ]
then
    echo
    if ! mkdir -pv "$RUN_CONFIGS_DIR"
    then
        echo -e "\nFailed to make dir '$RUN_CONFIGS_DIR'"
        exit 1
    fi
    chmod go-rwx "$RUN_CONFIGS_DIR"
    chmod u+rwx "$RUN_CONFIGS_DIR"
fi


IFS=$'\n'
configToRun=""
echo -e "\nChoose a runtime configuration:\n"
select cnfg in $chromeConfigFolders "$CREATE_NEW_CONFIG"
do
    [ -n "$cnfg" ] && break
done
configToRun="$RUN_CONFIGS_DIR/$cnfg"


function confirmNotAlreadyRunning
{
    if ps -ef | egrep -- " --user-data-dir=$1( | *$)" | grep -v ' egrep '
    then
        echo -e "\nChrome session using '$1' is already running." \
                "Not starting another one.\a"
        exit 1
    fi
}
confirmNotAlreadyRunning "$configToRun"


function isPermittedRuntimeConfigDirName
{
    local candidateDirToken="${1##*/}"

    # Cannot be empty
    if [ -z "$candidateDirToken" ]
    then
        echo -e "\nRuntime config dir name is empty."
        return 1
    fi

    # Cannot contain the create new config dir command string, modulo case
    if egrep -i "$CREATE_NEW_CONFIG" <<< "$candidateDirToken"
    then
        echo -e "\nRuntime config dir name cannot contain the string" \
                "'$CREATE_NEW_CONFIG'."
        return 1
    fi

    # Can only contain some character types
    if  egrep '[^[:alpha:][:digit:]_-]' <<< "$candidateDirToken"
    then
        echo -e "\nRuntime config dir names may only contain letters," \
                  "digits, '_' and '-'."
        return 1
    fi
}


if ! [ "$CREATE_NEW_CONFIG" = "$cnfg" ]
then

    selectedRejected=false

    ! isPermittedRuntimeConfigDirName "$cnfg" && selectedRejected=true

    # Must be a readable, writable directory
    if ! [ -d "$configToRun" ] || \
       ! [ -r "$configToRun" ] || \
       ! [ -w "$configToRun" ]
    then
        echo -e "\n'$configToRun' is either not a directory, not readable," \
                   "or not writeable."
        selectedRejected=true
    fi

    if $selectedRejected
    then
      echo -e \ "\nTo run chrome a readable/writeable runtime configuration" \
                  "directory must be selected."
      exit 1
    fi

else # create a new chrome-runner runtime environment

    echo
    read -erp "Enter simple name of new chrome runtime config dir: " cnfg

    createRejected=false

    ! isPermittedRuntimeConfigDirName "$cnfg" && createRejected=true

    configToRun="$RUN_CONFIGS_DIR/$cnfg"

    # Cannot already exist in the runtime configs dir
    if [ -e "$configToRun" ]
    then
        echo -e "\n'$configToRun' already exists."
        createRejected=true
    fi

    if $createRejected
    then
      echo -e \ "\nTo create a new chrome runtime configuration a legal" \
                "runtime config directory name must be entered."
        exit 1
    fi

    echo
    if ! mkdir -v "$configToRun"
    then
        echo -e "\nFailed to make dir '$configToRun'."
        exit 1
    fi
    chmod go-rwx "$configToRun"
    chmod u+rwx "$configToRun"

    # TODO: Move all the "copy preferences from an existing config dir"
    #       functionality to its own function

    # This check confirms we're not creating the very first runtime config dir
    # in RUN_CONFIGS_DIR, which if so there's no point attempting to copy
    # preferences from an existing config dir to the one just created.
    if [ -n "$chromeConfigFolders" ]  # dir just created is NOT in this value
    then
        REPLY=""
        echo
        read -erp \
  "Set '$configToRun' preferences from an existing chrome runtime config? Y/N "

        if [ Y = "$REPLY" ]
        then
            select prefsToUse in $chromeConfigFolders
            do
                [ -n "$configToRun" ] && break
            done

            if ! isPermittedRuntimeConfigDirName "$REPLY"
            then
                echo -e "\nCannot copy Preferences from '$REPLY'."
                exit 1
            fi

            prefsToUse="$RUN_CONFIGS_DIR/$prefsToUse/Default/Preferences"

            if [ -f "$prefsToUse" ] && [ -r "$prefsToUse" ]
            then
                # If you create the prefs folder and file before starting
                # chrome with a new config dir, it overwrites the prefs file,
                # thus:
                # TODO: create tmp file that tells user what to do and pass it
                #       into temporary chromium instance as the "splash" screen
             echo -e "\nThis script will now open an instance of chrome" \
                     "using '$configToRun'. Simply shut it off immediately" \
                     "to allow this script to complete setting its" \
                     "preferences to a copy of '$prefsToUse'. It will then" \
                     "restart chrome."
                read -erp "<Enter> to proceed."

                set -o xtrace
                chromium --user-data-dir="$configToRun" \
                         --disable-webgl \
                         --disable-3d-apis
                set +o xtrace

                echo
                cp -v "$prefsToUse" "$configToRun/Default/"

            else
                echo -e "\nCan't access file '$prefsToUse'."
                exit 1
            fi
        fi
    fi
fi

confirmNotAlreadyRunning "$configToRun"


confirmGoolgeSessionRunsAlone ()
{
    echo "TODO Google sessions"
    # TODO: If configToRun is Google, and other sessions are running:
    #              exit with error message.
    #       Else if configToRun is not Google, check that a Google one is not
#            running. If a google session is running, exit with erromr msg.
}
confirmGoolgeSessionRunsAlone


# Deleting JSON file 'Local State' causes chrome to claim your Preferences
# file is corrupt (it's likely not) and to refuse to load it.
DO_NOT_DELETE='\/('
DO_NOT_DELETE="${DO_NOT_DELETE}First Run"
DO_NOT_DELETE="${DO_NOT_DELETE}LOCK"
DO_NOT_DELETE="${DO_NOT_DELETE}|chrome_shutdown_ms\\.txt"
DO_NOT_DELETE="${DO_NOT_DELETE}|Last Version"
DO_NOT_DELETE="${DO_NOT_DELETE}|Bookmarks"
DO_NOT_DELETE="${DO_NOT_DELETE}|Secure Preferences"
DO_NOT_DELETE="${DO_NOT_DELETE}|Local State"
DO_NOT_DELETE="${DO_NOT_DELETE}|Preferences"
DO_NOT_DELETE="${DO_NOT_DELETE}|Cookies"
DO_NOT_DELETE="${DO_NOT_DELETE}"') *$'


function isSafeToShredAndNull
{
    [ -z "$1" ] && return 1
    ! egrep "$DO_NOT_DELETE" <<< "$1" &>/dev/null
}


# Do not suffix dirs with '/' or '*', nor both.
declare -r configFilesToNull="$configToRun/Avatars
$configToRun/BrowserMetrics-*
$configToRun/BrowserMetrics/BrowserMetrics-*
$configToRun/Default/.org.chromium.Chromium.*
$configToRun/Default/Cookies-journal
$configToRun/Default/databases
$configToRun/Default/data_reduction_proxy_leveldb
$configToRun/Default/Extension State
$configToRun/Default/Extension State/lost
$configToRun/Default/Extension State/lost
$configToRun/Default/Favicons
$configToRun/Default/GCM Store/Encryption
$configToRun/Default/GPUCache
$configToRun/Default/heavy_ad_intervention_opt_out.db
$configToRun/Default/History
$configToRun/Default/History Provider Cache
$configToRun/Default/IndexedDB/*.indexeddb.leveldb
$configToRun/Default/LOG
$configToRun/Default/Local Storage/leveldb
$configToRun/Default/Login Data
$configToRun/Default/Media History
$configToRun/Default/Network Action Predictor
$configToRun/Default/Network Persistent State
$configToRun/Default/Platform Notifications
$configToRun/Default/PreferredApps
$configToRun/Default/previews_opt_out.db
$configToRun/Default/QuotaManager
$configToRun/Default/Reporting and NEL
$configToRun/Default/Service Worker
$configToRun/Default/Session Storage
$configToRun/Default/Sessions
$configToRun/Default/Shortcuts
$configToRun/Default/Site Characteristics Database
$configToRun/Default/Sync Data/LevelDB
$configToRun/Default/shared_proto_db
$configToRun/Default/shared_proto_db/metadata
$configToRun/Default/Top Sites
$configToRun/Default/TransportSecurity
$configToRun/Default/Visited Links
$configToRun/Default/Web Data
$configToRun/GrShaderCache/GPUCache
$configToRun/Safe Browsing Cookies
$configToRun/ShaderCache/GPUCache"

declare -r cacheToRun="$RUN_CACHES_DIR/$cnfg"
declare -r cacheFilesToNull="$cacheToRun/Default/Cache
$cacheToRun/Default/Code Cache"


function nullOut
{
    if [ -w "$1" ]
    then
        if ! egrep "^($RUN_CONFIGS_DIR|$RUN_CACHES_DIR)" <<< "$1" &>/dev/null
        then
            echo -e "\nNOT DELETEING: $1"
            echo -e "\nDANGER WILL ROBINSON!\a"
            exit 1
        fi
        if ! isSafeToShredAndNull "$1"  # Yes, do safe check before size check
        then
            [ 'D' != "$2" ] && echo "Will NOT shred/null: $1"
            return
        fi
        [ '0' = $( stat --printf '%s' "$1" ) ] && return
        shred -n 1 -x "$1"
        cat /dev/null > "$1"
    fi
}


function nullOutOutFiles
{
    local f1=""
    IFS=$'\n'
    for f1 in $1
    do
        f1=$( sed -r 's/\/+ *$//' <<< "$f1" )
        if [ -f "$f1" ]
        then
            nullOut "$f1" $2

        elif [ -d "$f1" ]
        then
            local f2=""
            for f2 in $( find "$f1" -size +0 )
            do
                [ "$f1" = "$f2" ] && continue
                nullOutOutFiles "$f2" $2
            done

        else
            [ 'D' != "$2" ] && echo -e "DNE: $f1"
        fi
    done
}

echo -e "\nStarting chrome with config $configToRun"

nullOutOutFiles "$configFilesToNull" D    # D => don't show DNE messages
nullOutOutFiles "$cacheFilesToNull" D


echo -e '\033]2;'$cnfg chrome'\007'                       # set console title
set -o xtrace
chromium --proxy-server="$https_proxy" \
         --user-data-dir="$configToRun" \
         --disable-webgl \
         --disable-3d-apis "$@"
set +o xtrace

echo
nullOutOutFiles "$configFilesToNull"
nullOutOutFiles "$cacheFilesToNull"


echo -e "\n||files|| > 0 in $configToRun and $cacheToRun:"
IFS=$'\n'
for f in $( find "$cacheToRun" "$configToRun" \
                 -type f -size +0 -exec stat -c "%s %y %n" {} \; )
do
    s=$( cut -d ' ' -f1              <<< "$f" )
    r=$( cut -d ' ' -f1 --complement <<< "$f" )
    printf '%8i %s\n' $s $r

done | sort -b -n -k 1   # | egrep -v '^ *0'

echo -e "\nTo verify the above assertions:" \
        "\n\n\t$ cd '$configToRun'" \
        "\n\t$ ls -lRSr | egrep -v '^d' | more"

