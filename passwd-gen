#!/bin/bash

# Author: drpawpaw - 201?

# Generates likely random-enough passwords of any positive length.
# Likely secure enough for most use cases.
# https://en.m.wikipedia.org/wiki//dev/random

if ! (( $1 > 0 )) &>/dev/null
then
    echo -e "\nUsage: $ ${0##*/} {positive interger password length}"
    exit 1
fi

# Excludes some characters most likely to be mishandled by
# string handling code in shell scripts, PHP, JavaScript, etc.

# 4 consecutive backslashes seem to be the safest approach on the bash cmd line
# to getting tr to recognize a backslash as a non-meta character, at least
# when the bash string is double quote delimited. But 3 work, also, if they're
# not the last three characters in the string. 2 also work, but only if they
# are the last characters in the string, and only if you're OK with a warning
# message that the string is not portable.

cat /dev/random | tr -dc '[:graph:]' | \
                  tr -d "\"\`\'\$\\\\|=*:;/.&({[<>#" | \
                  head -c $1

